SHELL-SCRIPTS 

SCRIPT-1 (VARIABLE)

#!/bin/bash   #shebang- bash signature

#accessing system or environment variable
#NOTE- system variable is always accessed using $VARIABLE_NAME_IN_CAPITAL_LETTER

echo $BASH

#creating and accessing user-defined variable
name="my name is mihir"   #variable created #variable is name and value is "my name is mihir"
echo $name     #accessing variable using $name of the variable in small letters

#always remember that the variable are of two type i.e system-defined variable and user-defined variable.
#variable are represnted using $ in scripting.

SCRIPT-2  (VARIABLE)

#!/bin/bash
echo "welcome to the  world of devops"   #echo will print the message, when the script will be executed.
sleep 1  #pause the output for a second
echo "what is your name?"
read name           #read will take the input provide user as a variable
echo "what is your age?"
read age
sleep 2
echo "kindly verify the details provide you. your name is ${name} and your age is ${age}"
#to access the variable in a string use ${variable}
sleep 1
echo "Thank You"

SCRIPT-3   (POSITIONAL ARGUMENTS)

#!/bin/bash
echo "my name is $1"  #arguments can be accessed using $argument number
echo "i live in $2"

#argument are the arguments or values which are passed while executing the script.
#for e.g ./argument.sh mihir gondia
#here, mihir will be considered as argument 1 ($1) && gondia will be considered as argument 2 ($2).

SCRIPT-4  (IF-ELSE)

#!/bin/bash
if [ "$1" = "like" ] #here $1 is the argument
then
echo "thank you for liking this video"
else
echo "i hope you like this video"
fi     #fi is use to end the if-else statement

#if will help me to execute the script if a certain condition is met
#if the condition is not met it will execute the condition else

SCRIPT-5  (IF-ELIF)

#question- write a shell script to find the greatest number out of 3 0r from 3.

#when we have more than 2 conditions possible, we have to use if-else
#!/bin/bash   -shebang signature

#let's assume a,b, and c as any 3 numbers/variables.
a=100
b=201
c=150

#to access the variable in script, use $variable_name

#condition 1st
if [[ $a -gt $b && $a -gt $c ]] ##use [[ ]] if comparing multiple conditions at once or while using &&.
then
echo "a is the biggest"

elif [[ $b -gt $a && $b -gt $c ]]   #condition 2nd
then
echo "b is the biggest"

else    #if both the conditions are not true
echo "c is the biggest"

fi   #when using if in the script, use fi to end the script.

SCRIPT-6  (FOR LOOP)

#!/bin/bash

#jaha 1 chiz baar baar karni hai, waha loop use hota hai.
#for eg agar output to baar baar read/monitor karte rehna hai to loop lgate hai
#loop is basically use to iterate
#Using loops, you can run a set of commands over and over again, until a certain condition is met.
#two types of loop - for loop & while loop

for ((i=0; i<10; i++))
do
echo "$i"
#In a for loop, the variable iterates over a list of values and ends when there are no more values to iterate over.
done   #done is use to end the loop

SCRIPT-7   (EASY SCRIPT FOR TAKING BACKUP)

#!/bin/bash
#in this script i want to take backup of /home/ec2-user/shell-scripts
#and store in /home/ec2-user/backups

mkdir /home/ec2-user/backups #created a folder, where i want to store the backups

tar -czvf /home/ec2-user/backups/backup-$(date "+%y-%m-%d-%h-%m").tar.gz --absolute-names /home/ec2-user/shell-scripts

echo "backup complete"

SCRIPT-8 (ADVANCE SCRIPT FOR TAKING BACKUP)

#!/bin/bash

mkdir /home/ec2-user/backups/  #created a folder, where i want to store the backups

src_dir=/home/ec2-user/shell-scripts/  #path of the directory, of which backup is to be taken
tgt_dir=/home/ec2-user/backups/backup  #path of directory where i want to store the backup

curr_timestamp=$(date "+%y-%m-%d-%h-%m")
backup_file=$tgt_dir-$curr_timestamp.tgz

tar czf $backup_file --absolute-names $src_dir

echo "backup is successfully completed"

SCRIPT-9  (SCRIPT TO CHECK DISK SPACE)

#QUE- Write a shell script to check the disk space, and alert if disk is used above the limit.

#!/bin/bash

#here awk will print the 1st and 5th column of the output generated by df -h.
#while loop will repeatedly read the output generated by awk

df -h | awk '{print $1,$5}' | while read output;
do
alert=10
usage=$(echo $output | awk '{print $2}' | cut -d'%' -f1)  #cut cmnd will cut the %symbol from column 2.
file_sys=$(echo $output | awk '{print $1}')
backup_date=$(date +'%m/%d/%y %H:%M:%S')

if [ $usage -ge $alert ]   #condition
then
echo "CRITICAL for $file_sys on $backup_date"
fi    #fi is used to end if statement
done   #done is used to end while loop.

SCRIPT-10

#Question- write a shell script to print the PID of all the amazon process running on your machine.

#!/bin/bash
ps -ef | grep "amazon" | awk '{print $2}'

#here command ps-ef will list all the current running processes on system
# grep will print the process details only for amazon from the output generated by ps -ef
# awk command will only print column no 2nd as it contains PID's
#in this script the pipe | is used, | will take the output of previous cmnd and use as input for nxt cmnd

SCRIPT-11

#Question- write a shell script to print the ERROR from a remote log file.

#!/bin/bash
curl https://raw.githubusercontent.com/iam-veeramalla/sandbox/main/log/dummylog01122022.log | grep "ERROR"

#Here, curl command will retrieve all the info from the provide link of log file
# and grep will filter ERROR logs from the log file.

SCRIPT-12

#Question- Write a shells script to print the numbers divisible/multiple by 3 & 5, and not with 15.

#divisible by 3 and 5 ka matlab hai, vo numbers jo 3 and 5 k table mein aate hai. (3,6,9,12)(5,10,15,20)
#and not with 15 ka matlab hai, 15 k table mein jo aate hai vo print nahi karana hai. (15,30,45,60,75,90)

#ask que to interviewer out of what range you want me to print
#ans- lets say from 1-100

#!/bin/bash

#understand there are 3 conditions here
#if divisible by 3  #if divisible by 5  #if not divisible by 15

for i in {1..100}; do  #defining a range of 1-100 using for loop

#          divisible by 3  OR   divisible by 5       AND    not divisible by 15
if ([ `expr $i % 3` == 0 ] || [ `expr $i % 5` == 0 ]) && [ `expr $i % 15` != 0 ];
then        # The condition uses the modulo operator `%` to check for divisibility.
echo $i
fi;
done

SCRIPT-13

#write and explain a bash script to print the numbers divisible by 6

#!/bin/bash

# Set the range of numbers
start=1
end=50

echo "Numbers divisible by 6 between $start and $end are:"

# Loop through the range and check divisibility by 6
for (( i=start; i<=end; i++ )); do
    if (( i % 6 == 0 )); then
        echo $i
    fi
done

Explanation:

The script defines a range of numbers using the start and end variables.
It then uses a for loop to iterate through the numbers within that range.
Inside the loop, it checks if the current number (i) is divisible by 6 using the modulo operator (%). If the remainder is 0, it means the number is divisible by 6.
If the condition is true, the script prints the current number

SCRIPT-14

#write and explain a bash script to print the even numbers

#!/bin/bash

echo "Printing Even Numbers"

for ((i=0; i<=10; i+=2)); do
  echo $i
done

Explanation:

#!/bin/bash: This line is called a shebang and is used to specify the interpreter for the script, in this case, Bash.

echo "Printing Even Numbers": This line prints a message to indicate that the script is about to print even numbers.

for ((i=0; i<=10; i+=2)): This is a for loop that initializes a variable i to 0 and increments it by 2 in each iteration until it reaches 10.

echo $i: Inside the loop, this line prints the current value of i, which represents an even number.

SCRIPT-15

#write and explain a bash script to print the odd numbers

#!/bin/bash

# Set the limit for odd numbers
LIMIT=20

echo "Odd numbers up to $LIMIT:"

# Loop through numbers from 1 to the specified limit
for ((i=1; i<=LIMIT; i+=2))
do
  echo $i
done

Explanation:

#!/bin/bash: This line specifies that the script should be interpreted using the Bash shell.

LIMIT=20: This sets the limit for odd numbers. You can change this value to set a different limit.

for ((i=1; i<=LIMIT; i+=2)): This is a for loop that iterates through odd numbers starting from 1 up to the specified limit. The i+=2 increments i by 2 in each iteration.

echo $i: This prints the current odd number.

SCRIPT-16

#Question- write a shell script to print the number of occurances of letter "S" in "MISSISSIPPI"

#!/bin/bash

word="MISSISSIPPI"
letter="S"

# Using grep to count occurrences
count=$(echo "$word" | grep -o "$letter" | wc -l)

echo "The number of occurrences of the letter '$letter' in '$word' is: $count"

#here option -o is used with grep which will only pick $letter from the $word
#wc -l will print the no of lines of variable $s


